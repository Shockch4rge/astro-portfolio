---
import type { MarkdownHeading } from "astro";
import type Heading from "@utils/types/Heading";
import TocHeading from "./TocHeading.astro";

type Props = { headings: MarkdownHeading[] };

function buildToc(headings: MarkdownHeading[]) {
    const toc: Heading[] = [];
    const rootHeadings = new Map<number, Heading>();

    for (const h of headings) {
        const heading: Heading = { ...h, subheadings: [] };

        rootHeadings.set(heading.depth, heading);

        if (heading.depth === 2) {
            toc.push(heading);
        } else {
            rootHeadings.get(heading.depth - 1)!.subheadings.push(heading);
        }
    }

    return toc;
}

const { headings } = Astro.props;

const toc = buildToc(headings);
---

<nav
    class="toc mt-14 max-w-xs py-4 px-6 bg-slate-900 border-2 border-solid border-cyan-500 hidden xl:block self-start rounded-md sticky top-8"
>
    <h2 class="text-2xl text-blue-400 tracking-widest">OVERVIEW</h2>
    <ul class="mt-4 space-y-2">
        {toc.map(h => <TocHeading heading={h} />)}
    </ul>
    <svg class="toc-progress" xmlns="http://www.w3.org/2000/svg">
        <path
            class="toc-marker"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-dasharray="1 0 0 1000"
            stroke-dashoffset="1"
            stroke-linecap="round"
            stroke-linejoin="round"
        >
        </path>
    </svg>
    <style>
        .toc-progress {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }

        path {
            stroke-dasharray: 100;
            stroke-dashoffset: 100;
            animation: draw 1s alternate;
        }

        @keyframes draw {
            to {
                stroke-dashoffset: 0;
            }
        }
    </style>
    <script>
        function drawPath() {
            const path = document.querySelector("path .toc-marker");
            const links = Array.from(document.querySelectorAll(".toc a"));

            if (!links.length) return;

            // Start with an empty array of path data values (joined with
            // spaces later)
            const pathData = [];
            let left = 0; // The last x position / indentation

            // Iterate over each link to build up the pathData
            links.forEach((link, i) => {
                const x = link.offsetLeft;
                const y = link.offsetTop;
                const height = link.offsetHeight;

                if (i === 0) {
                    // Like drawing with a pen...
                    // 'M'ove to the top left of the first link,
                    // and then draw a 'L'ine to the bottom left
                    pathData.push("M", x, y, "L", x, y + height);
                } else {
                    // If the current link is indented differently than the last,
                    // then come down to the current link's top before moving
                    // left or right. This ensures we get 90-degrees angle at the
                    // corners.
                    if (left !== x) pathData.push("L", left, y);

                    // Draw a line to the top left of the current link
                    pathData.push("L", x, y);

                    // Draw a line to the bottom left of the current link
                    pathData.push("L", x, y + height);
                }

                // Save the current link's x position to compare with the next
                // link
                left = x;
            });

            // Apply all this path data to the path's d attribute
            path.setAttribute("d", pathData.join(" "));
        }

        drawPath();
    </script>
</nav>
